function addBootstrapGridTemplates(n){n.put("appendPagingTemplate.html",'<div class="col-xs-12" style="text-align: center">    <span data-ng-show="grid.loading">Loading...<\/span>    <a class="cmdLoadMore" data-ng-hide="grid.loading" data-ng-click="grid.nextPage()" style="cursor: pointer">Load more<\/a><\/div>'),n.put("bootstrapGrid.html",'<div class="row">    <div class="col-xs-4 col-sm-8">        <span data-ng-include="grid.options.topButtonsTemplate"><\/span>        <span data-ng-show="grid.loading">Loading...<\/span>    <\/div>    <div class="col-xs-8 col-sm-4">        <div class="input-group">            <input type="text" class="form-control" placeholder="Search" data-ng-model="grid.filterOptions.filterText" />            <span class="input-group-btn" data-ng-click="grid.load()">                <button class="btn btn-default">                    <span class="glyphicon glyphicon-search"><\/span>                <\/button>            <\/span>        <\/div>    <\/div><\/div><table class="table table-hover">    <thead>        <tr>            <th style="width: 50px;"><\/th>            <th class="pointer" data-ng-repeat="col in grid.columnDefs" data-ng-click="grid.toggleSort(col.field)">{{col.displayName}}                 <span class="glyphicon" data-ng-class="{\'glyphicon-chevron-up\':grid.sort[col.field] == \'\', \'glyphicon-chevron-down\':grid.sort[col.field] == \'desc\'}"><\/span>            <\/th>        <\/tr>    <\/thead>    <tbody>        <tr data-ng-repeat="item in grid.items">            <td data-ng-include="grid.options.rowButtonsTemplate"><\/td>            <td class="pointer" data-ng-repeat="col in grid.columnDefs" data-ng-click="grid.rowClick(item)">{{filterOrDefault(col,item)}}<\/td>        <\/tr>    <\/tbody><\/table><div class="row" data-ng-include="grid.options.pagingTemplate"><\/div>'),n.put("defaultPagingTemplate.html",'<div class="col-xs-2">    <select class="form-control" data-ng-options="size for size in grid.pagingOptions.pageSizes" data-ng-model="grid.pagingOptions.pageSize"><\/select><\/div><div class="col-xs-10">    <ul class="pagination" style="margin: 0;">        <li><a class="pointer" data-ng-click="grid.firstPage()">&lt;&lt;<\/a><\/li>        <li><a class="pointer" data-ng-click="grid.previousPage()">&lt;<\/a><\/li>        <li data-ng-repeat="page in grid.pagingOptions.pagerPages" data-ng-class="{active:page==grid.pagingOptions.currentPage}">            <a class="pointer" data-ng-click="grid.goToPage(page)">{{page}}<\/a>        <\/li>        <li><a class="pointer" data-ng-click="grid.nextPage()">&gt;<\/a><\/li>        <li><a class="pointer" data-ng-click="grid.lastPage()">&gt;&gt;<\/a><\/li>    <\/ul><\/div>'),n.put("rowButtonsTemplate.html",' <span class="glyphicon glyphicon-remove pointer"        data-ng-show="grid.options.allowDelete"        data-ng-click="grid.confirmDelete(\'This cannot be undone.  Are you sure?\',item)"><\/span>')}if(angular){angular.module("serverValidate",[]).directive("serverValidate",[function(){return console.log("serverValidate: wiring up"),{require:"ngModel",link:function(n,t,i,r){var f;console.log("serverValidate: link"),console.log(n),console.log(t),console.log(i),console.log(r);var o=i.serverValidate,e=o==null?[]:o.split(","),u=e[0];u.length>0&&(u=u+"."),u=u+"modelState",f=e.length>1?e[1]:i.ngModel.replace(i.serverValidate+".",""),f=f.replace("$index",n.$index),console.log("Will watch "+u+" for "+f),n.$watch(u,function(){console.log("serverValidate: modelState changed");var t=n.$eval(u);(console.log("serverValidate: setting error for "+f),t!=null)&&(t[f]?(r.$setValidity("server",!1),r.$error.server=t[f]):(r.$setValidity("server",!0),r.$error.server=[]))}),n.$watch(i.ngModel,function(n,t){n!=t&&(r.$setValidity("server",!0),r.$error.server=[])})}}}]);function isScrolledIntoView(n){var i=$(window).scrollTop(),r=i+$(window).height(),t=$(n).offset().top,u=t+$(n).height();return(console.log({docViewTop:i,docViewBottom:r,elemTop:t,elemBottom:u}),t==0)?!1:t>=i&&t<=r}var bootstrapGrid=angular.module("bootstrapGrid",[]).directive("bootstrapGrid",["$filter","$templateCache",function(n,t){return addBootstrapGridTemplates(t),{scope:!0,templateUrl:"bootstrapGrid.html",compile:function(){return{pre:function(t,i,r){t.filterOrDefault=function(t,i){var u=i[t.field];if(t.cellFilter==null||t.cellFilter=="")return u;var r=t.cellFilter.split(":"),f=r[0],e=r.length>1?r[1]:null,o=r.length>2?r[2]:null;return n(f)(u,e,o)},t.grid=t.$parent[r.bootstrapGrid],t.$watch("grid.pagingOptions",function(n,i){n!==i&&(n.currentPage!==i.currentPage||n.pageSize!==i.pageSize)&&t.grid.loadIn(100,t.grid.options.pagingMode=="append")},!0),t.$watch("grid.filterOptions.filterText",function(n,i){n!==i&&(t.grid.pagingOptions.currentPage=1,t.grid.loadIn(300))},!0),t.$watch("grid.loading",function(){})}}}}}])}
//@ sourceMappingURL=SimpleEntityApi.angular.min.js.map